// Function to fetch weather data
async function getWeatherData(city) {
    try {
        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${apiKey}`);
        const data = await response.json();

        if (data.cod !== 200) {
            throw new Error('City not found.');
        }

        return data;
    } catch (error) {
        console.error(error);
        // Display error message to the user
        alert('Error fetching weather data.');
    }
}

// Function to fetch forecast data
async function getForecastData(city) {
    try {
        const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&appid=${apiKey}`);
        const data = await response.json();

        if (data.cod !== 200) {
            throw new Error('Error fetching forecast data.');
        }

        return data.list; 
    } catch (error) {
        console.error(error);
        // Display error message to the user
        alert('Error fetching forecast data.');
    }
}

// Function to display current weather
function displayCurrentWeather(data) {
    const cityName = document.querySelector('.city-name');
    const weatherIcon = document.querySelector('.weather-icon');
    const tempCelsius = document.getElementById('temp-celsius');
    const tempFahrenheit = document.getElementById('temp-fahrenheit');
    const humidity = document.getElementById('humidity');
    const windSpeed = document.getElementById('wind-speed');

    cityName.textContent = `${data.name}, ${data.sys.country}`;
    weatherIcon.innerHTML = `<img src="http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png">`;
    tempCelsius.textContent = data.main.temp.toFixed(1);
    tempFahrenheit.textContent = ((data.main.temp * 9/5) + 32).toFixed(1);
    humidity.textContent = data.main.humidity;
    windSpeed.textContent = data.wind.speed;
}

// Function to display forecast
function displayForecast(forecastData) {
    forecastContainer.innerHTML = ''; 
    forecastData.forEach(item => {
        const forecastCard = document.createElement('div');
        forecastCard.classList.add('forecast-card');

        const date = new Date(item.dt_txt);
        const dayOfWeek = date.toLocaleDateString('en-US', { weekday: 'short' }); 

        forecastCard.innerHTML = `
            <h3>${dayOfWeek}</h3>
            <img src="http://openweathermap.org/img/wn/${item.weather[0].icon}@2x.png">
            <p>Temp: ${item.main.temp.toFixed(1)}Â°C</p>
        `;

        forecastContainer.appendChild(forecastCard);
    });
}

// Function to handle search button click
searchBtn.addEventListener('click', async () => {
    const city = cityInput.value;
    if (city) {
        const weatherData = await getWeatherData(city);
        const forecastData = await getForecastData(city);

        displayCurrentWeather(weatherData);
        displayForecast(forecastData);
    }
});

// Function to handle current location button click
currentLocationBtn.addEventListener('click', async () => {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            async position => {
                const latitude = position.coords.latitude;
                const longitude = position.coords.longitude;

                const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=metric&appid=${apiKey}`);
                const data = await response.json();

                displayCurrentWeather(data);
            },
            error => {
                console.error('Error getting current location:', error);
                // Handle location access denial
            }
        );
    } else {
        // Handle browser not supporting geolocation
    }
});

// ... (Rest of the code for favorites, local storage, etc.)
